"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchContext = void 0;
var js_fetch_api_1 = require("@giphy/js-fetch-api");
var emotion_theming_1 = require("emotion-theming");
var react_1 = __importStar(require("react"));
var pingback_context_manager_1 = __importDefault(require("../pingback-context-manager"));
var theme_1 = require("./theme");
exports.SearchContext = react_1.createContext({});
var emptyGifsResult = {
    data: [],
    pagination: { total_count: 0, count: 0, offset: 0 },
    meta: { status: 200, msg: 'OK', response_id: '' },
};
var SearchContextManager = function (_a) {
    var _b, _c;
    var children = _a.children, _d = _a.options, options = _d === void 0 ? {} : _d, apiKey = _a.apiKey, theme = _a.theme, _e = _a.initialTerm, initialTerm = _e === void 0 ? '' : _e, initialChannel = _a.initialChannel, _f = _a.shouldDefaultToTrending, shouldDefaultToTrending = _f === void 0 ? true : _f;
    var gf = react_1.useMemo(function () { return new js_fetch_api_1.GiphyFetch(apiKey); }, [apiKey]);
    // the search term
    var _g = react_1.useState(initialTerm), term = _g[0], setTerm = _g[1];
    var _h = react_1.useState(false), isFetching = _h[0], setIsFetching = _h[1];
    // a user name search
    var channelSearch = '';
    if (term && term.indexOf('@') === 0) {
        channelSearch = term.slice(1).split(' ')[0];
    }
    // active channel we're searching and displaying in the search bar
    var _j = react_1.useState(initialChannel), activeChannel = _j[0], _setActiveChannel = _j[1];
    var setActiveChannel = react_1.useCallback(function (activeChannel) {
        _setActiveChannel(activeChannel);
        setTerm(''); // TODO: clear this here?
    }, []);
    // fetched list of trending search terms
    var _k = react_1.useState([]), trendingSearches = _k[0], setTrendingSearches = _k[1];
    // do a search for a term and optionally a channel
    var setSearch = react_1.useCallback(function (term) { return setTerm(term); }, []);
    var searchKey = [term, options.type, channelSearch, ((_b = activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.user) === null || _b === void 0 ? void 0 : _b.username) || '']
        .filter(function (val) { return !!val; })
        .join(' / ');
    // search fetch
    var fetchGifs = react_1.useCallback(function (offset) { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    setIsFetching(true);
                    result = emptyGifsResult;
                    if (!term) return [3 /*break*/, 2];
                    return [4 /*yield*/, gf.search(term, __assign(__assign({}, options), { offset: offset, channel: (_a = activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.user) === null || _a === void 0 ? void 0 : _a.username }))];
                case 1:
                    result = _b.sent();
                    return [3 /*break*/, 4];
                case 2:
                    if (!shouldDefaultToTrending) return [3 /*break*/, 4];
                    return [4 /*yield*/, gf.trending(__assign(__assign({}, options), { offset: offset }))];
                case 3:
                    result = _b.sent();
                    _b.label = 4;
                case 4:
                    setIsFetching(false);
                    return [2 /*return*/, result];
            }
        });
    }); }, [(_c = activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.user) === null || _c === void 0 ? void 0 : _c.username, gf, options, term, shouldDefaultToTrending]);
    var fetchAnimatedText = react_1.useCallback(function (offset) { return __awaiter(void 0, void 0, void 0, function () {
        var limit, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    limit = options.limit || 50;
                    return [4 /*yield*/, gf.animate(term, { offset: offset, limit: limit })];
                case 1:
                    result = _a.sent();
                    if (!result.pagination) {
                        result.pagination = { count: limit, total_count: limit, offset: offset };
                    }
                    return [2 /*return*/, result];
            }
        });
    }); }, [gf, options.limit, term]);
    var fetchChannelSearch = react_1.useCallback(function (offset) { return __awaiter(void 0, void 0, void 0, function () {
        var result, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetch(js_fetch_api_1.serverUrl + "channels/search?q=" + encodeURIComponent(channelSearch) + "&offset=" + offset + "&api_key=" + apiKey)];
                case 1:
                    result = _a.sent();
                    return [4 /*yield*/, result.json()];
                case 2:
                    data = (_a.sent()).data;
                    return [2 /*return*/, data];
            }
        });
    }); }, [apiKey, channelSearch]);
    react_1.useEffect(function () {
        var fetchTrendingSearches = function () { return __awaiter(void 0, void 0, void 0, function () {
            var result, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch(js_fetch_api_1.serverUrl + "trending/searches?api_key=" + apiKey)];
                    case 1:
                        result = _a.sent();
                        return [4 /*yield*/, result.json()];
                    case 2:
                        data = (_a.sent()).data;
                        setTrendingSearches(data || []);
                        return [2 /*return*/];
                }
            });
        }); };
        fetchTrendingSearches();
    }, [apiKey]);
    return (react_1.default.createElement(exports.SearchContext.Provider, { value: {
            activeChannel: activeChannel,
            setActiveChannel: setActiveChannel,
            fetchChannelSearch: fetchChannelSearch,
            term: term,
            channelSearch: channelSearch,
            trendingSearches: trendingSearches,
            setSearch: setSearch,
            fetchGifs: fetchGifs,
            fetchAnimatedText: fetchAnimatedText,
            searchKey: searchKey,
            isFetching: isFetching,
        } },
        react_1.default.createElement(emotion_theming_1.ThemeProvider, { theme: theme_1.initTheme(theme) },
            react_1.default.createElement(pingback_context_manager_1.default, { attributes: { layout_type: 'SEARCH' } }, children))));
};
exports.default = SearchContextManager;
//# sourceMappingURL=context.js.map